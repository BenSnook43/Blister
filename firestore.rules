rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User profiles
    match /users/{userId} {
      allow read, write: if true;  // Temporarily allow all access for debugging
    }

    // User connections - make more permissive for debugging
    match /userConnections/{userId} {
      allow read, write: if true;
    }

    // PR preferences - make more permissive for debugging
    match /pr_preferences/{userId} {
      allow read, write: if true;
    }

    // Race results collections
    match /raceResults/{resultId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || request.auth.token.admin == true);
    }

    // Manual results
    match /{path=**}/user_manual_results/{resultId} {
      allow read, write: if true;
    }

    // Events
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Only allow delete if user owns the event
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // User results collection
    match /user_results/{resultId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }

    // Default rule
    match /{document=**} {
      allow read, write: if true;  // Temporarily allow everything
    }
  }
}